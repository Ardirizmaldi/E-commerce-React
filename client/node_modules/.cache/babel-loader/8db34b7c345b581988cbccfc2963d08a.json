{"ast":null,"code":"import _slicedToArray from \"/home/ardi/Documents/React-Project/e-commerce/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nexport const useDarkMode = () => {\n  const _useState = useState(\"light\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        theme = _useState2[0],\n        setTheme = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        componentMounted = _useState4[0],\n        setComponentMounted = _useState4[1];\n\n  const setMode = mode => {\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setMode(\"light\");\n    } else {\n      setMode(\"light\");\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches && !localTheme ? setMode(\"dark\") : localTheme ? setTheme(localTheme) : setMode(\"light\");\n    setComponentMounted(true);\n  }, []);\n  return [theme, toggleTheme, componentMounted];\n};","map":{"version":3,"sources":["/home/ardi/Documents/React-Project/e-commerce/client/src/components/toggle/useDarkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","window","localStorage","setItem","toggleTheme","localTheme","getItem","matchMedia","matches"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA,oBACLD,QAAQ,CAAC,OAAD,CADH;AAAA;AAAA,QACxBE,KADwB;AAAA,QACjBC,QADiB;;AAAA,qBAEiBH,QAAQ,CAAC,KAAD,CAFzB;AAAA;AAAA,QAExBI,gBAFwB;AAAA,QAENC,mBAFM;;AAG/B,QAAMC,OAAO,GAAGC,IAAI,IAAI;AACtBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACD,GAHD;;AAKA,QAAMI,WAAW,GAAG,MAAM;AACxB,QAAIT,KAAK,KAAK,OAAd,EAAuB;AACrBI,MAAAA,OAAO,CAAC,OAAD,CAAP;AACD,KAFD,MAEO;AACLA,MAAAA,OAAO,CAAC,OAAD,CAAP;AACD;AACF,GAND;;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB;AACAL,IAAAA,MAAM,CAACM,UAAP,IACAN,MAAM,CAACM,UAAP,CAAkB,8BAAlB,EAAkDC,OADlD,IAEA,CAACH,UAFD,GAGIN,OAAO,CAAC,MAAD,CAHX,GAIIM,UAAU,GACVT,QAAQ,CAACS,UAAD,CADE,GAEVN,OAAO,CAAC,OAAD,CANX;AAOAD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAO,CAACH,KAAD,EAAQS,WAAR,EAAqBP,gBAArB,CAAP;AACD,CA7BM","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState(\"light\");\n  const [componentMounted, setComponentMounted] = useState(false);\n  const setMode = mode => {\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setMode(\"light\");\n    } else {\n      setMode(\"light\");\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches &&\n    !localTheme\n      ? setMode(\"dark\")\n      : localTheme\n      ? setTheme(localTheme)\n      : setMode(\"light\");\n    setComponentMounted(true);\n  }, []);\n\n  return [theme, toggleTheme, componentMounted];\n};\n"]},"metadata":{},"sourceType":"module"}