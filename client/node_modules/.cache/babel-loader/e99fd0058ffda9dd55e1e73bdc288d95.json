{"ast":null,"code":"import _slicedToArray from \"/home/ardi/Documents/React-Project/e-commerce/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  const _useState = useState(window.localStorage.getItem('theme') || 'light'),\n        _useState2 = _slicedToArray(_useState, 2),\n        theme = _useState2[0],\n        setTheme = _useState2[1];\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      window.localStorage.setItem('theme', 'dark');\n      setTheme('dark');\n    } else {\n      window.localStorage.setItem('theme', 'light');\n      setTheme('light');\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n  }, []);\n  return [theme, toggleTheme];\n};","map":{"version":3,"sources":["/home/ardi/Documents/React-Project/e-commerce/client/src/components/toggle/useDarkMode.js"],"names":["useEffect","useState","useDarkMode","window","localStorage","getItem","theme","setTheme","toggleTheme","setItem","localTheme"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA,oBACHD,QAAQ,CAACE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,KAAwC,OAAzC,CADL;AAAA;AAAA,QACtBC,KADsB;AAAA,QACfC,QADe;;AAE/B,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIF,KAAK,KAAK,OAAd,EAAuB;AACrBH,MAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,OAA5B,EAAqC,MAArC;AACAF,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,KAHD,MAGO;AACLJ,MAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,OAA5B,EAAqC,OAArC;AACAF,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD;AACF,GARD;;AAUAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,UAAU,GAAGP,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAnB;AACAK,IAAAA,UAAU,IAAIH,QAAQ,CAACG,UAAD,CAAtB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO,CAACJ,KAAD,EAAQE,WAAR,CAAP;AACD,CAlBM","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n    const [theme, setTheme] = useState(window.localStorage.getItem('theme') || 'light');\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      window.localStorage.setItem('theme', 'dark')\n      setTheme('dark')\n    } else {\n      window.localStorage.setItem('theme', 'light')\n      setTheme('light')\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n  }, []);\n\n  return [theme, toggleTheme]\n};"]},"metadata":{},"sourceType":"module"}