{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/ardi/Documents/React-Project/graphql/E-commerce-React/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    currentUser @client\\n  }\\n\"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    cartItems @client\\n  }\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    cartTotal @client\\n  }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    itemCount @client\\n  }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    cartHidden @client\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  extend type Item {\\n    quantity: Int\\n  }\\n  extend type DateTime {\\n    nanoseconds: Int!\\n    seconds: Int!\\n  }\\n  extend type User {\\n    id: ID!\\n    displayName: String!\\n    email: String!\\n    createdAt: DateTime!\\n  }\\n  extend type Mutation {\\n    ToggleCartHidden: Boolean!\\n    AddItemToCart(item: Item!): [Item]!\\n    SetCurrentUser(user: User!): User!\\n    RemoveItemFromCart(item: Item!): [Item]!\\n    ClearItemFromCart(item: Item!): [Item]!\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"apollo-boost\";\nimport { addItemToCart, getCartItemCount } from \"./cart.utils\";\nexport const typeDefs = gql(_templateObject());\nconst GET_CART_HIDDEN = gql(_templateObject2());\nconst GET_ITEM_COUNT = gql(_templateObject3());\nconst GET_CART_TOTAL = gql(_templateObject4());\nconst GET_CART_ITEMS = gql(_templateObject5());\nconst GET_CURRENT_USER = gql(_templateObject6());\n\nconst updateCartItemsRelatedQueries = (cache, newCartItems) => {\n  cache.writeQuery({\n    query: GET_ITEM_COUNT,\n    data: {\n      itemCount: getCartItemCount(newCartItems)\n    }\n  });\n  cache.writeQuery({\n    query: GET_CART_TOTAL,\n    data: {\n      cartTotal: getCartTotal(newCartItems)\n    }\n  });\n  cache.writeQuery({\n    query: GET_CART_ITEMS,\n    data: {\n      cartItems: newCartItems\n    }\n  });\n};\n\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, {\n      cache\n    }) => {\n      const _cache$readQuery = cache.readQuery({\n        query: GET_CART_HIDDEN\n      }),\n            cartHidden = _cache$readQuery.cartHidden;\n\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: {\n          cartHidden: !cartHidden\n        }\n      });\n      return !cartHidden;\n    },\n    addItemToCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery2 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery2.cartItems;\n\n      const newCartItems = addItemToCart(cartItems, item);\n      updateCartItemsRelatedQueries(cache, newCartItems);\n      return newCartItems;\n    },\n    removeItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery3 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery3.cartItems;\n\n      const newCartItems = removeItemFromCart(cartItems, item);\n      updateCartItemsRelatedQueries(cache, newCartItems);\n      return newCartItems;\n    },\n    clearItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery4 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery4.cartItems;\n\n      const newCartItems = clearItemFromCart(cartItems, item);\n      updateCartItemsRelatedQueries(cache, newCartItems);\n      return newCartItems;\n    },\n    setCurrentUser: (_root, {\n      user\n    }, {\n      cache\n    }) => {\n      cache.writeQuery({\n        query: GET_CURRENT_USER,\n        data: {\n          currentUser: user\n        }\n      });\n      return user;\n    }\n  }\n};","map":{"version":3,"sources":["/home/ardi/Documents/React-Project/graphql/E-commerce-React/client/src/graphql/resolvers.js"],"names":["gql","addItemToCart","getCartItemCount","typeDefs","GET_CART_HIDDEN","GET_ITEM_COUNT","GET_CART_TOTAL","GET_CART_ITEMS","GET_CURRENT_USER","updateCartItemsRelatedQueries","cache","newCartItems","writeQuery","query","data","itemCount","cartTotal","getCartTotal","cartItems","resolvers","Mutation","toggleCartHidden","_root","_args","readQuery","cartHidden","item","removeItemFromCart","clearItemFromCart","setCurrentUser","user","currentUser"],"mappings":"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","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { addItemToCart, getCartItemCount } from \"./cart.utils\";\n\nexport const typeDefs = gql`\n  extend type Item {\n    quantity: Int\n  }\n  extend type DateTime {\n    nanoseconds: Int!\n    seconds: Int!\n  }\n  extend type User {\n    id: ID!\n    displayName: String!\n    email: String!\n    createdAt: DateTime!\n  }\n  extend type Mutation {\n    ToggleCartHidden: Boolean!\n    AddItemToCart(item: Item!): [Item]!\n    SetCurrentUser(user: User!): User!\n    RemoveItemFromCart(item: Item!): [Item]!\n    ClearItemFromCart(item: Item!): [Item]!\n  }\n`;\n\nconst GET_CART_HIDDEN = gql`\n  {\n    cartHidden @client\n  }\n`;\n\nconst GET_ITEM_COUNT = gql`\n  {\n    itemCount @client\n  }\n`;\n\nconst GET_CART_TOTAL = gql`\n  {\n    cartTotal @client\n  }\n`;\n\nconst GET_CART_ITEMS = gql`\n  {\n    cartItems @client\n  }\n`;\n\nconst GET_CURRENT_USER = gql`\n  {\n    currentUser @client\n  }\n`;\n\nconst updateCartItemsRelatedQueries = (cache, newCartItems) => {\n  cache.writeQuery({\n    query: GET_ITEM_COUNT,\n    data: { itemCount: getCartItemCount(newCartItems) }\n  });\n\n  cache.writeQuery({\n    query: GET_CART_TOTAL,\n    data: { cartTotal: getCartTotal(newCartItems) }\n  });\n\n  cache.writeQuery({\n    query: GET_CART_ITEMS,\n    data: { cartItems: newCartItems }\n  });\n};\n\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, { cache }) => {\n      const { cartHidden } = cache.readQuery({\n        query: GET_CART_HIDDEN\n      });\n\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: { cartHidden: !cartHidden }\n      });\n\n      return !cartHidden;\n    },\n\n    addItemToCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = addItemToCart(cartItems, item);\n\n      updateCartItemsRelatedQueries(cache, newCartItems);\n\n      return newCartItems;\n    },\n\n    removeItemFromCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = removeItemFromCart(cartItems, item);\n\n      updateCartItemsRelatedQueries(cache, newCartItems);\n\n      return newCartItems;\n    },\n\n    clearItemFromCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = clearItemFromCart(cartItems, item);\n\n      updateCartItemsRelatedQueries(cache, newCartItems);\n\n      return newCartItems;\n    },\n\n    setCurrentUser: (_root, { user }, { cache }) => {\n      cache.writeQuery({\n        query: GET_CURRENT_USER,\n        data: { currentUser: user }\n      });\n\n      return user;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}