{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/ardi/Documents/React-Project/graphql/E-commerce-React/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/ardi/Documents/React-Project/graphql/E-commerce-React/client/src/App.container.jsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    currentUser @client\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation SetCurrentUser($user: User!) {\\n    setCurrentUser(user: $user) @client\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\nimport App from \"./App\";\nconst SET_CURRENT_USER = gql(_templateObject());\nconst GET_CURRENT_USER = gql(_templateObject2());\n\nconst AppContainer = () => React.createElement(Query, {\n  query: GET_CURRENT_USER,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, ({\n  data: {\n    currentUser\n  }\n}) => React.createElement(Mutation, {\n  mutation: SET_CURRENT_USER,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, setCurrentUser => React.createElement(App, {\n  currentUser: currentUser,\n  setCurrentUser: user => {\n    setCurrentUser({\n      variables: {\n        user\n      }\n    });\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n})));\n\nexport default AppContainer;","map":{"version":3,"sources":["/home/ardi/Documents/React-Project/graphql/E-commerce-React/client/src/App.container.jsx"],"names":["React","Mutation","Query","gql","App","SET_CURRENT_USER","GET_CURRENT_USER","AppContainer","data","currentUser","setCurrentUser","user","variables"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,MAAMC,gBAAgB,GAAGF,GAAH,mBAAtB;AAMA,MAAMG,gBAAgB,GAAGH,GAAH,oBAAtB;;AAMA,MAAMI,YAAY,GAAG,MACnB,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAED,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG,CAAC;AAAEE,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF;AAAR,CAAD,KACC,oBAAC,QAAD;AAAU,EAAA,QAAQ,EAAEJ,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGK,cAAc,IACb,oBAAC,GAAD;AACE,EAAA,WAAW,EAAED,WADf;AAEE,EAAA,cAAc,EAAEE,IAAI,IAAI;AACtBD,IAAAA,cAAc,CAAC;AAAEE,MAAAA,SAAS,EAAE;AAAED,QAAAA;AAAF;AAAb,KAAD,CAAd;AACD,GAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,CAFJ,CADF;;AAiBA,eAAeJ,YAAf","sourcesContent":["import React from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nimport App from \"./App\";\n\nconst SET_CURRENT_USER = gql`\n  mutation SetCurrentUser($user: User!) {\n    setCurrentUser(user: $user) @client\n  }\n`;\n\nconst GET_CURRENT_USER = gql`\n  {\n    currentUser @client\n  }\n`;\n\nconst AppContainer = () => (\n  <Query query={GET_CURRENT_USER}>\n    {({ data: { currentUser } }) => (\n      <Mutation mutation={SET_CURRENT_USER}>\n        {setCurrentUser => (\n          <App\n            currentUser={currentUser}\n            setCurrentUser={user => {\n              setCurrentUser({ variables: { user } });\n            }}\n          />\n        )}\n      </Mutation>\n    )}\n  </Query>\n);\n\nexport default AppContainer;"]},"metadata":{},"sourceType":"module"}