{"ast":null,"code":"import _defineProperty from \"/home/ardi/Documents/React-Project/e-commerce/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/ardi/Documents/React-Project/e-commerce/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ardi/Documents/React-Project/e-commerce/client/src/components/toggle/toggle.component.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"../../global.styles\";\nconst defaultContextData = {\n  dark: false,\n  toggle: () => {}\n};\nconst ThemeContext = React.createContext(defaultContextData);\n\nconst useTheme = () => React.useContext(ThemeContext);\n\nconst useEffectDarkMode = () => {\n  const _React$useState = React.useState({\n    dark: false,\n    hasTheMounted: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        themeState = _React$useState2[0],\n        setThemeState = _React$useState2[1];\n\n  React.useEffect(() => {\n    const isDark = localStorage.getItem(\"dark\") === \"true\";\n    setThemeState(_objectSpread({}, themeState, {\n      dark: isDark,\n      hasTheMounted: true\n    }));\n  }, []);\n  return [themeState, setThemeState];\n};\n\nconst ThemeProviders = ({\n  children\n}) => {\n  const _useEffectDarkMode = useEffectDarkMode(),\n        _useEffectDarkMode2 = _slicedToArray(_useEffectDarkMode, 2),\n        themeState = _useEffectDarkMode2[0],\n        setThemeState = _useEffectDarkMode2[1];\n\n  if (!themeState.hasTheMounted) {}\n\n  ;\n\n  const toggle = () => {\n    const dark = !themeState.dark;\n    localStorage.setItem(\"dark\", JSON.stringify(dark));\n    setThemeState(_objectSpread({}, themeState, {\n      dark\n    }));\n  };\n\n  const computedTheme = themeState.dark ? themeState(\"dark\") : themeState(\"light\");\n  return React.createElement(ThemeProvider, {\n    theme: computedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(ThemeContext.Provider, {\n    value: {\n      dark: themeState.dark,\n      toggle\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, children));\n};\n\nexport { ThemeProvider, useTheme };","map":{"version":3,"sources":["/home/ardi/Documents/React-Project/e-commerce/client/src/components/toggle/toggle.component.js"],"names":["React","ThemeProvider","theme","defaultContextData","dark","toggle","ThemeContext","createContext","useTheme","useContext","useEffectDarkMode","useState","hasTheMounted","themeState","setThemeState","useEffect","isDark","localStorage","getItem","ThemeProviders","children","setItem","JSON","stringify","computedTheme"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,IAAI,EAAE,KADmB;AAEzBC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAFS,CAA3B;AAKA,MAAMC,YAAY,GAAGN,KAAK,CAACO,aAAN,CAAoBJ,kBAApB,CAArB;;AACA,MAAMK,QAAQ,GAAG,MAAMR,KAAK,CAACS,UAAN,CAAiBH,YAAjB,CAAvB;;AAEA,MAAMI,iBAAiB,GAAG,MAAM;AAAA,0BACMV,KAAK,CAACW,QAAN,CAAe;AACjDP,IAAAA,IAAI,EAAE,KAD2C;AAEjDQ,IAAAA,aAAa,EAAE;AAFkC,GAAf,CADN;AAAA;AAAA,QACvBC,UADuB;AAAA,QACXC,aADW;;AAK9Bd,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpB,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,MAAiC,MAAhD;AACAJ,IAAAA,aAAa,mBAAMD,UAAN;AAAkBT,MAAAA,IAAI,EAAEY,MAAxB;AAAgCJ,MAAAA,aAAa,EAAE;AAA/C,OAAb;AACD,GAHD,EAGG,EAHH;AAKA,SAAO,CAACC,UAAD,EAAaC,aAAb,CAAP;AACD,CAXD;;AAaA,MAAMK,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA,6BACDV,iBAAiB,EADhB;AAAA;AAAA,QAC9BG,UAD8B;AAAA,QAClBC,aADkB;;AAGrC,MAAI,CAACD,UAAU,CAACD,aAAhB,EAA+B,CAE9B;;AAAA;;AAED,QAAMP,MAAM,GAAG,MAAM;AACjB,UAAMD,IAAI,GAAG,CAACS,UAAU,CAACT,IAAzB;AACAa,IAAAA,YAAY,CAACI,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAenB,IAAf,CAA7B;AACAU,IAAAA,aAAa,mBAAKD,UAAL;AAAiBT,MAAAA;AAAjB,OAAb;AACH,GAJD;;AAMA,QAAMoB,aAAa,GAAGX,UAAU,CAACT,IAAX,GAAkBS,UAAU,CAAC,MAAD,CAA5B,GAAuCA,UAAU,CAAC,OAAD,CAAvE;AAEA,SACI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEW,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD,CAAc,QAAd;AACI,IAAA,KAAK,EAAE;AAACpB,MAAAA,IAAI,EAAES,UAAU,CAACT,IAAlB;AAAwBC,MAAAA;AAAxB,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKe,QAHL,CADJ,CADJ;AASH,CAxBD;;AA0BA,SAAQnB,aAAR,EAAsBO,QAAtB","sourcesContent":["import React from \"react\";\nimport {ThemeProvider} from \"emotion-theming\";\nimport theme from \"../../global.styles\";\n\nconst defaultContextData = {\n  dark: false,\n  toggle: () => {}\n};\n\nconst ThemeContext = React.createContext(defaultContextData);\nconst useTheme = () => React.useContext(ThemeContext);\n\nconst useEffectDarkMode = () => {\n  const [themeState, setThemeState] = React.useState({\n    dark: false,\n    hasTheMounted: false\n  });\n  React.useEffect(() => {\n    const isDark = localStorage.getItem(\"dark\") === \"true\";\n    setThemeState({ ...themeState, dark: isDark, hasTheMounted: true });\n  }, []);\n\n  return [themeState, setThemeState];\n};\n\nconst ThemeProviders = ({ children }) => {\n    const [themeState, setThemeState] = useEffectDarkMode();\n\n    if (!themeState.hasTheMounted) {\n\n    };\n\n    const toggle = () => {\n        const dark = !themeState.dark;\n        localStorage.setItem(\"dark\", JSON.stringify(dark));\n        setThemeState({...themeState, dark});\n    };\n\n    const computedTheme = themeState.dark ? themeState(\"dark\") : themeState(\"light\");\n\n    return (\n        <ThemeProvider theme={computedTheme}>\n            <ThemeContext.Provider\n                value={{dark: themeState.dark, toggle}}\n            >\n                {children}\n            </ThemeContext.Provider>\n        </ThemeProvider>\n    )\n}\n\nexport {ThemeProvider,useTheme}"]},"metadata":{},"sourceType":"module"}